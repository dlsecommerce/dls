import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { createMiddlewareClient } from "@supabase/auth-helpers-nextjs";

/**
 * Middleware de autentica√ß√£o com Supabase (vers√£o otimizada)
 * ---------------------------------------------------------
 * - Redireciona usu√°rios n√£o autenticados para /inicio
 * - Redireciona usu√°rios logados para /dashboard ao tentar acessar / ou /login
 * - Evita flash de tela no p√≥s-login (callback)
 * - Mant√©m cookie sincronizado com o Supabase SSR/Edge
 */

export async function middleware(req: NextRequest) {
  // Cria a resposta padr√£o (necess√°ria pro Supabase funcionar no Edge)
  const res = NextResponse.next();

  // Cria cliente Supabase com contexto de request/response
  const supabase = createMiddlewareClient({ req, res });

  // Obt√©m sess√£o atual
  const {
    data: { session },
  } = await supabase.auth.getSession();

  const pathname = req.nextUrl.pathname;
  const referer = req.headers.get("referer") || "";

  // üîπ Ignora rotas p√∫blicas, assets e t√©cnicas
  if (
    pathname.startsWith("/auth") ||
    pathname.startsWith("/_next") ||
    pathname.startsWith("/api") ||
    pathname.startsWith("/favicon") ||
    pathname.startsWith("/site.webmanifest") ||
    pathname.includes(".") // arquivos est√°ticos
  ) {
    return res;
  }

  // üß† Log opcional para depura√ß√£o (pode remover em prod)
  console.log("üîç [Middleware] Sess√£o:", session ? "ATIVA" : "INEXISTENTE", "‚Üí", pathname);

  // üîπ Usu√°rio logado ‚Üí redireciona rotas p√∫blicas para o dashboard
  if (session && (pathname === "/" || pathname === "/inicio" || pathname === "/login")) {
    const redirectUrl = new URL("/dashboard", req.url);
    redirectUrl.searchParams.set("from", pathname);
    console.log("‚û°Ô∏è Redirecionando usu√°rio logado para:", redirectUrl.toString());
    return NextResponse.redirect(redirectUrl);
  }

  // üîπ Usu√°rio n√£o autenticado ‚Üí bloqueia acesso a rotas protegidas
  if (!session && pathname.startsWith("/dashboard")) {
    // ‚öôÔ∏è Permite acesso tempor√°rio se veio diretamente do callback (para evitar loop)
    if (referer.includes("/auth/callback")) {
      console.log("‚ö†Ô∏è Acesso tempor√°rio permitido (p√≥s-callback)");
      return res;
    }

    const redirectUrl = new URL("/inicio", req.url);
    redirectUrl.searchParams.set("from", pathname);
    console.log("‚õî Usu√°rio n√£o autenticado ‚Üí redirecionando para:", redirectUrl.toString());
    return NextResponse.redirect(redirectUrl);
  }

  // ‚úÖ Caso contr√°rio, permite continuar normalmente
  return res;
}

export const config = {
  matcher: [
    "/",
    "/inicio",
    "/login",
    "/dashboard/:path*",
    "/auth/:path*",
    "/api/:path*",
  ],
};
